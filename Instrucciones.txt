UNIVERSIDAD PONTIFICIA BOLIVARIASECCIONAL BUCARAMANGAFACULTAD DE INGENIERIA DE SISTEMAS E INFORMÁTICALÓGICA DE PROGRAMACIÓNINFORME DE LABORATORIO DE FUNCIONES
Objetivos:•El  estudiante  estará  en  capacidad  de  comprender la  importancia  del  uso  de  un sistema de control de versiones
•El estudiante estará en capacidad de utilizarlas estructuras de repetición for, while y do-while
•El estudiante estará en capacidad de diseñar algoritmos que utilicen estructuras de controly repeticiónmediante el lenguaje de programación Python
•El  estudiante  comprenderá  la  importancia  de  las  funciones  para  la  organización  y reutilización de algoritmosDESARROLLOTomando  como  referencia los  conocimientos  adquiridos  de  Python  y  Git  realice  el siguiente proyecto:

PARTE 1:1.Cree   un   proyecto   denominado   LaboratorioFunciones(recuerde   que   algunas herramientas  no  crean  proyectos,  por  lo  que  deberá  crear  una  carpeta  con  el nombreLaboratorioFuncionesen donde guardará los archivos de manera local).
2.Inicialice un repositorio Git localen el proyecto creadoen su computador.
3.Cree un Repositorio en GitHub llamado LaboratorioFuncionesRemoto.
4.En el proyectolocal, creearchivo llamado instrucciones.txt, en donde guarde cada uno de los numerales de esta lista.
PARTE 2:Resuelva los siguientes puntos:
•Crear  una  funciónllamada “a_power_b”que imprima  el  resultado  de  elevar  un número  a  en  b  (es  decir ab)  sin  utilizar  la  librería math.Hacer  un  algoritmoque permite leer tanto el número a como el número b mediante el teclado y calculeabllamandola funcióncreada“a_power_b”. Realice un commit y push al repositoriocon los cambios.Recuerde que los valores se deben leer POR FUERA de la función.
Carlos Humberto Carreño Díaz
•Modifique el algoritmo para  seguir  calculando  tantas potencias como  se  desee, deteniéndosecuando se digite que a=0.Realice un commit y push al repositoriocon los cambios.
•Modifique el algoritmo agregandomanejo de errores (try) para controlar los casos en donde se digite una letraen lugar de un número o que la potencia sea demasiado grande y desborde la memoria asignada. Realice un commit y push al repositoriocon los cambios.
•Finalmente  agregue un  contador  que  permita  saber  cuántas  veces se  calcularon potencias, indicando cuántas veces elresultado fue par o fue imparo cuántas veces se presentó un error. Realice un commit y push al repositoriocon los cambios.
PARTE 3:•Realizar  una  función“is_prime”que  permita  saber  si  un  número  es  o  no  primo, mediante  un  mensaje “Is  a  prime  number”o “Is  NOT  a  prime  number”.Hacer  un algoritmoque permite leer un número “n”mediante el teclado y determine si es un número primo  o  no.Recuerde  que  los  valores  se  deben  leer  POR  FUERA  de  la función.
•Modifique el algoritmode manera tal que ya no imprima mensajes,sino que retorne 0 si no es primo, 1 si es primoo -1 si no se puede determinar o hubo error.Ahora permita  que  se  pueda  leer  cualquier  cantidad  de  números  y  determinar  si  son números primos, el algoritmo dejará de leer números cuando se digite un número menor o igual a cero.
Realice un commit y push al repositoriocon los cambios.
•Finalmente modifique el algoritmo de manera quepermita saber cuántas veces se calcularon primose indique si es cantidad de veces es también primo.
PARTE 4:•Realizar una función“perfect_number”que permita saber si un número es perfecto. Un número perfecto es un número cuyos divisores (exceptuando el mismonúmeroobviamente)suman el mismo número. Por ejemplo: 6 es perfecto porque sus divisores 1+2+3 = 6
•Modifique la función para que ahora calcule un número “casi perfecto”, el cual es un número en el que la suma de sus divisores máximo tiene 3 de diferencia con el número.20 es casi perfecto porque sus divisores 1+2+4+5+10 suman 22, que essólo2 más que el 20.